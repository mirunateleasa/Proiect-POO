#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <cstdio>
#include "Classes.h";
using namespace std;

//main primeste ca argumente fisierele:
//1. Commands.txt care contine (pe fiecare linie, fara spatiu dupa ele) comenzile ce trebuiesc executate
//2. Database.txt care contine (pe fiecare linie, fara spatiu dupa ele) numele tabelelor (si respectiv ale fisierelor binare corespunzatoare) existente deja in baza de date, la pornirea programului

int main(int argc, char* argv[])
{
	cout << "HELLO!" << endl << "--------------------------" << endl;
	cout << "argc= " << argc << endl;
	for (int i = 0; i < argc; i++)
	{
		cout << "argv[" << i << "]=" << argv[i] << endl;
	}

	ifstream theCommandsFile;
	theCommandsFile.open(argv[1], ios::in);
	File theCommands(argv[1]);
	theCommands.setContent(theCommandsFile);
	theCommandsFile.close();

	ifstream theDatabaseFile;
	theDatabaseFile.open(argv[2], ios::in);
	File theDatabase(argv[2]);
	theDatabase.setContent(theDatabaseFile);
	theDatabaseFile.close();

	Command command;
	string theCommand = "";
	int noOfCommands = theCommands.getNoLines();
	int i = 1;

	while (noOfCommands != 0)
	{
		theCommand = theCommands.getTheLine(i);
		command.setName(theCommand);
		cout << "The command to execute is: " << command.getFirstWord() << " " << command.getSecondWord() << endl;
		Parser parsing(command, theDatabase);
		parsing.Parse(command);

		theDatabaseFile.open("Database.txt", ios::in);
		File theDatabase("Database.txt");
		theDatabase.setContent(theDatabaseFile);
		theDatabaseFile.close();
		noOfCommands--;
		i++;
	}
}
